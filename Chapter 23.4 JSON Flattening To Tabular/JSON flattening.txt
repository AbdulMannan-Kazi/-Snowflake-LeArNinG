
-------------------------------------- Flatting JSON Data & Loading Into Snowflake Tables----------------------------------

-- create the table

create or replace table employee_tbl(
    emp_json variant
);

select * from employee_tbl;

--1st record
insert into employee_tbl(emp_json)
select parse_json(
  '{
    "employee": {"name": "John-1","age": 30,"height_in_ft": 5.11,"married": true,"has_kids": false,
      "stock_options": null,"email":"john1@ttips.com","phone": ["+1 123-456-7890","+1 098-765-4321"],
      "Address": {"street": "3621 McDonald Avenue","city": "Orlando","State": "Florida"}
               }
    }');
    
--2nd record
insert into employee_tbl(emp_json)
select parse_json(
  '{
    "employee": {"name": "John-2","age": 33,"height_in_ft": 5.09,"married": false,"has_kids": false,
      "stock_options": 10,"email":"john2@ttips.com","phone": ["+1 222-456-0987"],
      "Address": {"street": "532 Locust View Drive","city": "San Jose","State": "California"}
               }
    }');

select * from employee_tbl;
--CREATING SEQUENCE OBJECTS FOR attaching t3 table (emp , phone , address) for primary & foreign key

-- create sequence - for increamental number as primary key & foreign key
create or replace sequence emp_seq
  start 1 
  increment 1
  comment = 'employee sequence';
  
create or replace sequence phone_seq
  start 1 
  increment 1
  comment = 'phone sequence';
  
create or replace sequence address_seq
  start 1 
  increment 1
  comment = 'address sequence';

----------------------CREATING MASTER TABLES TO LOAD JSON DATA------ in Column format

-- employee master table
create or replace table employee_master(
    emp_pk integer default emp_seq.nextval,  -- using seq objects as an autogenerated number
    name string,
    age number(3),
    height_in_cm decimal(6,3),
    is_married boolean,
    has_kids boolean,
    stock_options integer,
    email varchar(100)
);

-- child table holding all the phones -- having relationship with emp master table
create or replace table emp_phones(
    phone_pk integer default phone_seq.nextval, -- using phone seq as an autogenerated number- primary  key
    emp_fk number,
    phone_type varchar(20),
    phone_number varchar(30)
);

-- child table holding all the address -- having relationship with emp master table
create or replace table emp_address(
    address_pk integer default address_seq.nextval, --  -- using address seq as an autogenerated number- primary  key
    emp_fk number,
    street_address varchar(200),
    city varchar(50),
    state varchar(50)
);

------------------INSERTING DATA FROM JSONTABLE(employee_tbl) TO MASTER TABLE

--------Inserting into emp_master table from json table(employee_tbl)
insert into employee_master (name, age, height_in_cm,is_married,has_kids,stock_options,email)  
select 
    emp_json:employee.name::string as name,
    emp_json:employee.age as age,
    (emp_json:employee.height_in_ft)*(12*2.54) as height_in_cm,
    emp_json:employee.married as is_married,
    emp_json:employee.has_kids as has_kids,
    emp_json:employee.stock_options as stock_options,
    emp_json:employee.email::string as email
from employee_tbl; 

-- verifying if data loaded or not   
select * from employee_master;

select * from employee_tbl;

--------Inserting into emp_phone table using sequences from json table(employee_tbl)

insert into emp_phones (emp_fk,phone_type,phone_number) -- having a refernece of primary key to master table 
select 
    b.emp_pk,
    'home_phone' as home_phone,
    a.emp_json:employee.phone[0]::string as home_phone
from 
    employee_tbl a   -- joining a variant data type empl table  with the employee master
    join 
    employee_master b 
    on  
        a.emp_json:employee.email = b.email -- comparing email because email is unique for everyone
union all
select 
    b.emp_pk,
    'work_phone' as work_phone,
    a.emp_json:employee.phone[1]::string as work_phone
from 
    employee_tbl a 
    join 
    employee_master b 
    on  
        a.emp_json:employee.email = b.email;

-- verifying if data loaded or not   
select * from emp_phones;  -- pk and refernce is also generated

--------Inserting into emp_address using sequences from json table(employee_tbl)

insert into emp_address (emp_fk,street_address,city,state)
select 
    b.emp_pk,
    a.emp_json:employee.Address.street::string as street,
    a.emp_json:employee.Address.city::string as city,
    a.emp_json:employee.Address.State::string as state
from 
    employee_tbl a 
    join 
    employee_master b 
    on  
        a.emp_json:employee.email = b.email; -- it's same as phone using email as unique identifier
        
-- verifying if data loaded or not        
select * from emp_address;

select e.*, a.* 
    from employee_master e join emp_address a on e.emp_pk = a.emp_fk; -- joinig master and address tble on basis of primary key 
    
    
    
select * from employee_tbl;
select * from employee_master;
select * from emp_address;
select * from emp_phones;





